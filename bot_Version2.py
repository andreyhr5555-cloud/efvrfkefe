import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from fastapi import FastAPI, Request
from supabase import create_client, Client
from dotenv import load_dotenv

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =========================
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SUPABASE_URL = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
SUPABASE_KEY = os.getenv("NEXT_PUBLIC_SUPABASE_ANON_KEY")

ALLOWED_ADMIN = "@denisHr55"
HR_USERS = [
    "@mkkdko", "@Annahrg25", "@sun_crazy", "@dooro4ka", "@nuttupp",
    "@luilu_hr", "@Dmytry44gg", "@lilkalinaa_rabotka", "@kirusiyaaa15",
    "@VladHR27", "@sophie_hr", "@DimitryHr", "@karisha522", "@arinaa_hr"
]
IT_USERS = ["@denishr55"]

IT_CATEGORIES = ["–†–∞–±–æ—Ç–∞ —é–∞", "–î–∂—É–±–ª", "–¢–µ–ª–µ–≥—Ä–∞–º", "–¢–∞—Ä–≥–µ—Ç", "–î—Ä—É–≥–æ–µ"]

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =========================
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# =========================
# FSM: –ü–æ—à–∞–≥–æ–≤–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
# =========================
class SpendForm(StatesGroup):
    waiting_for_category = State()  # IT —Ç–æ–ª—å–∫–æ
    waiting_for_amount = State()
    waiting_for_comment = State()
    waiting_for_photo = State()

# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =========================
def now_str() -> str:
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

async def ensure_user_in_db(username: str, role: str):
    existing = supabase.table("users").select("*").eq("username", username).execute()
    if not existing.data:
        supabase.table("users").insert({
            "username": username,
            "role": role,
            "balance": 0,
            "created_at": now_str()
        }).execute()

async def get_balance(username: str) -> float:
    data = supabase.table("users").select("balance").eq("username", username).execute()
    return data.data[0]["balance"] if data.data else 0

async def update_balance(username: str, new_balance: float):
    supabase.table("users").update({"balance": new_balance}).eq("username", username).execute()

# =========================
# /start
# =========================
@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    username = f"@{message.from_user.username}" if message.from_user.username else f"id{message.from_user.id}"
    await state.clear()

    if username == ALLOWED_ADMIN:
        role = "admin"
        await ensure_user_in_db(username, role)
        kb = [
            [types.KeyboardButton(text="üí∞ –î–ê–õ –î–ï–ù–ï–ì")],
            [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(text="üí∏ –î–æ–ª–∂–µ–Ω")],
        ]
        await message.answer("üîë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
    elif username in HR_USERS:
        role = "hr"
        await ensure_user_in_db(username, role)
        kb = [
            [types.KeyboardButton(text="üíµ –ü–æ—Ç—Ä–∞—Ç–∏–ª"), types.KeyboardButton(text="üì• –ü—Ä–∏—à–ª–∏")],
            [types.KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")]
        ]
        await message.answer("üë©‚Äçüíº HR –ø–∞–Ω–µ–ª—å", reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
    elif username in IT_USERS:
        role = "it"
        await ensure_user_in_db(username, role)
        kb = [
            [types.KeyboardButton(text="üíµ –ü–æ—Ç—Ä–∞—Ç–∏–ª"), types.KeyboardButton(text="üì• –ü—Ä–∏—à–ª–∏")],
            [types.KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")]
        ]
        await message.answer("üíª IT –ø–∞–Ω–µ–ª—å", reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

# =========================
# –ë–∞–ª–∞–Ω—Å
# =========================
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_handler(message: Message):
    username = f"@{message.from_user.username}"
    balance = await get_balance(username)
    await message.answer(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance} –≥—Ä–Ω</b>")

# =========================
# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
# =========================
@dp.message(F.text == "üì• –ü—Ä–∏—à–ª–∏")
async def plus_balance(message: Message):
    username = f"@{message.from_user.username}"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")

    @dp.message()
    async def add_sum(msg: Message):
        try:
            amount = float(msg.text)
            old_balance = await get_balance(username)
            new_balance = old_balance + amount
            await update_balance(username, new_balance)
            await msg.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –≥—Ä–Ω.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –≥—Ä–Ω.")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        dp.message.handlers.pop()  # –æ—á–∏—Å—Ç–∫–∞

# =========================
# FSM: –ü–æ—Ç—Ä–∞—Ç–∏–ª
# =========================
@dp.message(F.text == "üíµ –ü–æ—Ç—Ä–∞—Ç–∏–ª")
async def spent_start(message: Message, state: FSMContext):
    username = f"@{message.from_user.username}"
    if username in IT_USERS:
        kb = [[types.KeyboardButton(text=c)] for c in IT_CATEGORIES]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
        await state.set_state(SpendForm.waiting_for_category)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏:")
        await state.set_state(SpendForm.waiting_for_amount)

@dp.message(SpendForm.waiting_for_category)
async def process_category(message: Message, state: FSMContext):
    if message.text not in IT_CATEGORIES:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await state.set_state(SpendForm.waiting_for_amount)

@dp.message(SpendForm.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –Ω–∞ —á—Ç–æ –±—ã–ª–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã –¥–µ–Ω—å–≥–∏:")
        await state.set_state(SpendForm.waiting_for_comment)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@dp.message(SpendForm.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω —á–µ–∫–∞, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(SpendForm.waiting_for_photo)

@dp.message(SpendForm.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()
    username = f"@{message.from_user.username}"
    amount = data['amount']
    comment = data['comment']
    category = data.get("category", None)

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
    old_balance = await get_balance(username)
    new_balance = old_balance - amount
    await update_balance(username, new_balance)

    supabase.table("expenses").insert({
        "username": username,
        "role": "it" if username in IT_USERS else "hr",
        "category": category,
        "amount": amount,
        "comment": comment,
        "photo_id": file_id,
        "created_at": now_str()
    }).execute()

    await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} –≥—Ä–Ω –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–ø–∏—Å–∞–Ω —Å –±–∞–ª–∞–Ω—Å–∞.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –≥—Ä–Ω.")
    await bot.send_photo(chat_id=ALLOWED_ADMIN, photo=file_id,
                         caption=f"üíµ <b>–†–∞—Å—Ö–æ–¥ –æ—Ç {username}</b>\nüí∞ {amount} –≥—Ä–Ω\nüìù {comment}\nüìÇ {category or 'HR'}")
    await state.clear()

@dp.message(SpendForm.waiting_for_photo)
async def process_no_photo(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        username = f"@{message.from_user.username}"
        amount = data['amount']
        comment = data['comment']
        category = data.get("category", None)

        old_balance = await get_balance(username)
        new_balance = old_balance - amount
        await update_balance(username, new_balance)

        supabase.table("expenses").insert({
            "username": username,
            "role": "it" if username in IT_USERS else "hr",
            "category": category,
            "amount": amount,
            "comment": comment,
            "photo_id": None,
            "created_at": now_str()
        }).execute()

        await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} –≥—Ä–Ω –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ç–æ –∏ —Å–ø–∏—Å–∞–Ω —Å –±–∞–ª–∞–Ω—Å–∞.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –≥—Ä–Ω.")
        await bot.send_message(chat_id=ALLOWED_ADMIN,
                               text=f"üíµ <b>–†–∞—Å—Ö–æ–¥ –æ—Ç {username}</b>\nüí∞ {amount} –≥—Ä–Ω\nüìù {comment}\nüìÇ {category or 'HR'}")
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")

# =========================
# FastAPI –¥–ª—è Render
# =========================
app = FastAPI()

@app.get("/health")
async def health():
    return {"status": "ok", "time": now_str()}

@app.post("/webhook")
async def webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}

# =========================
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
# =========================
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    if os.getenv("RENDER", "false").lower() == "true":
        import uvicorn
        uvicorn.run("bot:app", host="0.0.0.0", port=8080)
    else:
        asyncio.run(main())
